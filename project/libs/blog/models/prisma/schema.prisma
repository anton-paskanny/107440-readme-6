// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          String   @id @default(uuid()) @map("id")
  title       String
  description String
  content     String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  userId      String   @map("user_id")
  state       String
  tags        String[]

  comments Comment[]

  @@index([title])
  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  message   String
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @map("post_id")

  @@index([postId])
  @@map("comments")
}

model VideoPost {
  id       String  @id @default(uuid())
  title    String
  videoUrl String  @map("video_url")
  postId   String?

  @@map("video_posts")
}

model LinkPost {
  id          String  @id @default(uuid())
  link        String
  description String?
  postId      String?

  @@map("link_posts")
}

model QuotePost {
  id     String @id @default(uuid())
  text   String
  author String

  @@map("quote_posts")
}

model TextPost {
  id           String @id @default(uuid())
  title        String
  announcement String
  text         String

  @@map("text_posts")
}

model PhotoPost {
  id    String @id @default(uuid())
  photo String

  @@map("photo_posts")
}
